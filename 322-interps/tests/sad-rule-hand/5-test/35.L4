((let ((g11 (new-tuple 0)))
   (begin
     (aset g11 0 (make-closure :g12 (new-tuple g11)))
     (print
      (+
       ((closure-proc (aref g11 0)) (closure-vars (aref g11 0)) 5)
       (let ((g13 (new-tuple 0)))
         (begin
           (aset g13 0 (make-closure :g14 (new-tuple g13)))
           ((closure-proc (aref g13 0)) (closure-vars (aref g13 0)) 3)))))))
 (:g14
  (vars f)
  (let ((g (aref vars 0)))
    (if (< f 1)
      1
      (+ f ((closure-proc (aref g 0)) (closure-vars (aref g 0)) (- f 1))))))
 (:g12
  (vars x)
  (let ((f (aref vars 0)))
    (if (< x 2)
      1
      (+
       ((closure-proc (aref f 0)) (closure-vars (aref f 0)) (- x 1))
       ((closure-proc (aref f 0)) (closure-vars (aref f 0)) (- x 2)))))))
