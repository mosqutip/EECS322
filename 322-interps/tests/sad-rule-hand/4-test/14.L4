(((if (let ([x (new-tuple 1 2 3 4)]) (begin (aset x 2 (new-array 0 0)) (a? (aref x 2)))) :f :g) (new-tuple 1 1) (new-tuple 0 0) 0)
 (:f (x y z)
  (print (if (a? x)
             (if (a? y)
                 (if (a? z)
                     (new-tuple x y z)
                     (+ (aref x 0) (+ (aref y 0) z)))
                 (+ (aref x 0) (+ y (if (a? z)
                                        (aref z 0)
                                        z))))
             (+ x 
                (+ (if (a? y) (aref y 0) y)
                   (if (a? z) (aref z 0) z))))))
 (:g (x y z)
  (print (* x (* y z)))))
