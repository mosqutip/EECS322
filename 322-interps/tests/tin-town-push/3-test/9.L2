(((call :main))
 (:main
  (eax <- (allocate 7 1))
  (args <- eax)
  (eax += 4)
  ((mem eax 0) <- 3) 
  (eax += 4)
  ((mem eax 0) <- 5)
  (eax += 4) 
  ((mem eax 0) <- 7) 
  (eax <- (allocate 5 1))
  ((mem eax 4) <- :f) 
  ((mem eax 8) <- args) 
  (my_closure <- eax) 
  (func <- (mem my_closure 4))
  (the_args <- (mem my_closure 8))
  (eax <- the_args) 
  (tail-call func)) 
 (:f
  (a <- eax)
  (arg1 <- 1)
  (arg1 >>= 1) 
  (tmp1 <- (mem a 0))
  (cjump arg1 < tmp1 :good1 :bad1)
  :bad1
  (arg1 <<= 1)
  (eax <- (array-error a arg1)) 
  :good1
  (arg1 <<= 2) 
  (arg1 += a)
  (arg1 <- (mem arg1 4)) 
  (arg2 <- 3)
  (arg2 >>= 1)
  (tmp2 <- (mem a 0))
  (cjump arg2 < tmp2 :good2 :bad2) 
  :bad2
  (arg2 <<= 1)
  (eax <- (array-error a arg2))
  :good2
  (arg2 <<= 2)
  (arg2 += a) 
  (arg2 <- (mem arg2 4))
  (arg3 <- 5)
  (arg3 >>= 1)
  (tmp3 <- (mem a 0))
  (cjump arg3 < tmp3 :good3 :bad3)
  :bad3
  (arg3 <<= 1) 
  (eax <- (array-error a arg3)) 
  :good3 
  (arg3 <<= 2)
  (arg3 += a)
  (arg3 <- (mem arg3 4)) 
  (val <- arg1)
  (val += arg2)
  (val -= 1) 
  (result <- val)
  (result += arg3) 
  (result -= 1)
  (eax <- (print result))
  (eax <- 1)
  (return)))
