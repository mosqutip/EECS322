((let ((array (new-tuple 3 4 5 6 7)))
   (let ((increase 3))
     (let ((new_array (:bump_array array increase)))
       (:print_array new_array))))
 (:bump_array (array increase)
   (let ((size (alen array)))
     (let ((size_offset (new-tuple size 0)))
       (:bump_helper array increase size_offset))))
 (:bump_helper (array increase size_offset)
   (let ((size (aref size_offset 0)))
     (let ((offset (aref size_offset 1)))
       (let ((unequal (- size offset)))
         (if unequal
	     (let ((old_val (aref array offset)))
	       (let ((new_val (+ old_val increase)))
	         (let ((dont_care (aset array offset new_val)))
		   (let ((next_offset (+ offset 1)))
		     (let ((new_s_o (new-tuple size next_offset)))
		       (:bump_helper array increase new_s_o))))))
	     array)))))
 (:print_array (array)
   (let ((size (alen array)))
     (:print_helper array size 0)))
 (:print_helper (array size offset)
   (let ((unequal (- size offset)))
     (if unequal
         (let ((elmt (aref array offset)))
	   (let ((dont_care (print elmt)))
	     (let ((next_offset (+ offset 1)))
	       (:print_helper array size next_offset))))
	 array))))
