((let ((__x0 (< 3 4))) (if __x0 (:test 5 5) (:test 6 5)))
(:tolist (__x1) (:tolisthelper __x1 0))
(:tolisthelper (__x2 __x3) (let ((__x4 (alen __x2))) (let ((__x5 (<= __x4 __x3))) (if __x5 (:nil) (let ((__x6 (aref __x2 __x3))) (let ((__x7 (+ 1 __x3))) (let ((__x8 (:tolisthelper __x2 __x7))) (:cons __x6 __x8))))))))
(:foreach (__x9 __x10) (let ((__x11 (:empty __x9))) (if __x11 1 (let ((__x13 (:head __x9))) (let ((__x12 (__x10 __x13))) (let ((__x14 (:tail __x9))) (:foreach __x14 __x10)))))))
(:map (__x15 __x16) (let ((__x17 (:empty __x15))) (if __x17 (:nil) (let ((__x18 (:head __x15))) (let ((__x19 (__x16 __x18))) (let ((__x20 (:tail __x15))) (let ((__x21 (:map __x20 __x16))) (:cons __x19 __x21))))))))
(:filter (__x22 __x23) (let ((__x24 (:empty __x22))) (if __x24 (new-tuple ) (let ((__x25 (:head __x22))) (let ((__x26 (__x23 __x25))) (if __x26 (let ((__x27 (:head __x22))) (let ((__x28 (:tail __x22))) (let ((__x29 (:filter __x28 __x23))) (:cons __x27 __x29)))) (let ((__x30 (:tail __x22))) (:filter __x30 __x23))))))))
(:foldl (__x31 __x32 __x33) (let ((__x34 (:empty __x33))) (if __x34 __x32 (let ((__x35 (:head __x33))) (let ((__x36 (__x31 __x32 __x35))) (let ((__x37 (:tail __x33))) (:foldl __x31 __x36 __x37)))))))
(:zip (__x38 __x39) (let ((__x40 (:empty __x38))) (if __x40 (:nil) (let ((__x41 (:empty __x39))) (if __x41 (:nil) (let ((__x42 (:head __x38))) (let ((__x43 (:head __x39))) (let ((__x44 (:nil))) (let ((__x45 (:cons __x43 __x44))) (let ((__x46 (:cons __x42 __x45))) (let ((__x47 (:tail __x38))) (let ((__x48 (:tail __x39))) (let ((__x49 (:zip __x47 __x48))) (:cons __x46 __x49))))))))))))))
(:find (__x50 __x51) (let ((__x52 (:empty __x50))) (if __x52 (:none) (let ((__x53 (:head __x50))) (let ((__x54 (__x51 __x53))) (if __x54 (let ((__x55 (:head __x50))) (:some __x55)) (let ((__x56 (:tail __x50))) (:find __x56 __x51))))))))
(:sq (__x57) (* __x57 __x57))
(:double (__x58) (+ __x58 __x58))
(:sqdouble (__x59) (let ((__x60 (:double __x59))) (let ((__x61 (:double __x59))) (* __x60 __x61))))
(:greaterthan3 (__x62) (< 3 __x62))
(:add (__x63 __x64) (+ __x63 __x64))
(:mult (__x65 __x66) (* __x65 __x66))
(:some (__x67) (let ((__x68 (new-tuple __x67))) (:tolist __x68)))
(:none () (new-tuple ))
(:option_get (__x69) (aref __x69 0))
(:nil () (new-tuple ))
(:cons (__x70 __x71) (new-tuple __x70 __x71))
(:head (__x72) (aref __x72 0))
(:tail (__x73) (aref __x73 1))
(:empty (__x74) (let ((__x75 (alen __x74))) (= 0 __x75)))
(:size (__x76) (let ((__x77 (:empty __x76))) (if __x77 0 (let ((__x78 (:tail __x76))) (let ((__x79 (:size __x78))) (+ 1 __x79))))))
(:contains (__x80 __x81) (let ((__x82 (:empty __x81))) (if __x82 0 (let ((__x83 (:head __x81))) (let ((__x84 (= __x80 __x83))) (if __x84 1 (let ((__x85 (:tail __x81))) (:contains __x80 __x85))))))))
(:not (__x86) (if __x86 0 1))
(:and (__x87 __x88) (if __x87 (if __x88 1 0) 0))
(:or (__x89 __x90) (if __x89 1 (if __x90 1 0)))
(:eq (__x91 __x92) (let ((__x93 (a? __x91))) (let ((__x94 (a? __x92))) (let ((__x95 (:and __x93 __x94))) (if __x95 (:eq_list __x91 __x92) (let ((__x96 (number? __x91))) (let ((__x97 (number? __x92))) (let ((__x98 (:and __x96 __x97))) (if __x98 (= __x91 __x92) 0)))))))))
(:eq_num (__x99 __x100) (= __x99 __x100))
(:eq_list (__x101 __x102) (let ((__x103 (:empty __x101))) (let ((__x104 (:empty __x102))) (let ((__x105 (:and __x103 __x104))) (if __x105 1 (let ((__x106 (:empty __x101))) (let ((__x107 (:empty __x102))) (let ((__x108 (:or __x106 __x107))) (if __x108 0 (let ((__x109 (:head __x101))) (let ((__x110 (:head __x102))) (let ((__x111 (:eq __x109 __x110))) (let ((__x112 (:tail __x101))) (let ((__x113 (:tail __x102))) (let ((__x114 (:eq_list __x112 __x113))) (:and __x111 __x114))))))))))))))))
(:eq_arr (__x115 __x116) (let ((__x117 (alen __x115))) (let ((__x118 (alen __x116))) (let ((__x119 (= __x117 __x118))) (if __x119 (:eq_arr_helper __x115 __x116 0) 0)))))
(:eq_arr_helper (__x120 __x121 __x122) (let ((__x123 (alen __x120))) (let ((__x124 (= __x123 __x122))) (let ((__x125 (alen __x121))) (let ((__x126 (= __x125 __x122))) (let ((__x127 (:and __x124 __x126))) (if __x127 1 (let ((__x128 (aref __x120 __x122))) (let ((__x129 (aref __x121 __x122))) (let ((__x130 (:eq __x128 __x129))) (let ((__x131 (+ 1 __x122))) (let ((__x132 (:eq_arr_helper __x120 __x121 __x131))) (:and __x130 __x132)))))))))))))
(:test (__x133 __x134) (let ((__x135 (:eq __x133 __x134))) (if __x135 (:print 1) (let ((__x136 (:print __x133))) (:print __x134)))))
(:print (__x137) (print __x137))
(:identity (__x138) __x138))