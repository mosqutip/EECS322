((let ((__x0 (:nil))) (let ((__x1 (:cons 4 __x0))) (let ((__x2 (:cons 3 __x1))) (let ((__x3 (:cons 2 __x2))) (let ((__x4 (:cons 1 __x3))) (let ((__x5 (new-tuple 1 2 3 4))) (let ((__x6 (:tolist __x5))) (:test __x4 __x6))))))))
(:tolist (__x7) (:tolisthelper __x7 0))
(:tolisthelper (__x8 __x9) (let ((__x10 (alen __x8))) (let ((__x11 (<= __x10 __x9))) (if __x11 (:nil) (let ((__x12 (aref __x8 __x9))) (let ((__x13 (+ 1 __x9))) (let ((__x14 (:tolisthelper __x8 __x13))) (:cons __x12 __x14))))))))
(:foreach (__x15 __x16) (let ((__x17 (:empty __x15))) (if __x17 1 (let ((__x19 (:head __x15))) (let ((__x18 (__x16 __x19))) (let ((__x20 (:tail __x15))) (:foreach __x20 __x16)))))))
(:map (__x21 __x22) (let ((__x23 (:empty __x21))) (if __x23 (:nil) (let ((__x24 (:head __x21))) (let ((__x25 (__x22 __x24))) (let ((__x26 (:tail __x21))) (let ((__x27 (:map __x26 __x22))) (:cons __x25 __x27))))))))
(:filter (__x28 __x29) (let ((__x30 (:empty __x28))) (if __x30 (new-tuple ) (let ((__x31 (:head __x28))) (let ((__x32 (__x29 __x31))) (if __x32 (let ((__x33 (:head __x28))) (let ((__x34 (:tail __x28))) (let ((__x35 (:filter __x34 __x29))) (:cons __x33 __x35)))) (let ((__x36 (:tail __x28))) (:filter __x36 __x29))))))))
(:foldl (__x37 __x38 __x39) (let ((__x40 (:empty __x39))) (if __x40 __x38 (let ((__x41 (:head __x39))) (let ((__x42 (__x37 __x38 __x41))) (let ((__x43 (:tail __x39))) (:foldl __x37 __x42 __x43)))))))
(:zip (__x44 __x45) (let ((__x46 (:empty __x44))) (if __x46 (:nil) (let ((__x47 (:empty __x45))) (if __x47 (:nil) (let ((__x48 (:head __x44))) (let ((__x49 (:head __x45))) (let ((__x50 (:nil))) (let ((__x51 (:cons __x49 __x50))) (let ((__x52 (:cons __x48 __x51))) (let ((__x53 (:tail __x44))) (let ((__x54 (:tail __x45))) (let ((__x55 (:zip __x53 __x54))) (:cons __x52 __x55))))))))))))))
(:find (__x56 __x57) (let ((__x58 (:empty __x56))) (if __x58 (:none) (let ((__x59 (:head __x56))) (let ((__x60 (__x57 __x59))) (if __x60 (let ((__x61 (:head __x56))) (:some __x61)) (let ((__x62 (:tail __x56))) (:find __x62 __x57))))))))
(:sq (__x63) (* __x63 __x63))
(:double (__x64) (+ __x64 __x64))
(:sqdouble (__x65) (let ((__x66 (:double __x65))) (let ((__x67 (:double __x65))) (* __x66 __x67))))
(:greaterthan3 (__x68) (< 3 __x68))
(:add (__x69 __x70) (+ __x69 __x70))
(:mult (__x71 __x72) (* __x71 __x72))
(:some (__x73) (let ((__x74 (new-tuple __x73))) (:tolist __x74)))
(:none () (new-tuple ))
(:option_get (__x75) (aref __x75 0))
(:nil () (new-tuple ))
(:cons (__x76 __x77) (new-tuple __x76 __x77))
(:head (__x78) (aref __x78 0))
(:tail (__x79) (aref __x79 1))
(:empty (__x80) (let ((__x81 (alen __x80))) (= 0 __x81)))
(:size (__x82) (let ((__x83 (:empty __x82))) (if __x83 0 (let ((__x84 (:tail __x82))) (let ((__x85 (:size __x84))) (+ 1 __x85))))))
(:contains (__x86 __x87) (let ((__x88 (:empty __x87))) (if __x88 0 (let ((__x89 (:head __x87))) (let ((__x90 (= __x86 __x89))) (if __x90 1 (let ((__x91 (:tail __x87))) (:contains __x86 __x91))))))))
(:not (__x92) (if __x92 0 1))
(:and (__x93 __x94) (if __x93 (if __x94 1 0) 0))
(:or (__x95 __x96) (if __x95 1 (if __x96 1 0)))
(:eq (__x97 __x98) (let ((__x99 (a? __x97))) (let ((__x100 (a? __x98))) (let ((__x101 (:and __x99 __x100))) (if __x101 (:eq_list __x97 __x98) (let ((__x102 (number? __x97))) (let ((__x103 (number? __x98))) (let ((__x104 (:and __x102 __x103))) (if __x104 (= __x97 __x98) 0)))))))))
(:eq_num (__x105 __x106) (= __x105 __x106))
(:eq_list (__x107 __x108) (let ((__x109 (:empty __x107))) (let ((__x110 (:empty __x108))) (let ((__x111 (:and __x109 __x110))) (if __x111 1 (let ((__x112 (:empty __x107))) (let ((__x113 (:empty __x108))) (let ((__x114 (:or __x112 __x113))) (if __x114 0 (let ((__x115 (:head __x107))) (let ((__x116 (:head __x108))) (let ((__x117 (:eq __x115 __x116))) (let ((__x118 (:tail __x107))) (let ((__x119 (:tail __x108))) (let ((__x120 (:eq_list __x118 __x119))) (:and __x117 __x120))))))))))))))))
(:eq_arr (__x121 __x122) (let ((__x123 (alen __x121))) (let ((__x124 (alen __x122))) (let ((__x125 (= __x123 __x124))) (if __x125 (:eq_arr_helper __x121 __x122 0) 0)))))
(:eq_arr_helper (__x126 __x127 __x128) (let ((__x129 (alen __x126))) (let ((__x130 (= __x129 __x128))) (let ((__x131 (alen __x127))) (let ((__x132 (= __x131 __x128))) (let ((__x133 (:and __x130 __x132))) (if __x133 1 (let ((__x134 (aref __x126 __x128))) (let ((__x135 (aref __x127 __x128))) (let ((__x136 (:eq __x134 __x135))) (let ((__x137 (+ 1 __x128))) (let ((__x138 (:eq_arr_helper __x126 __x127 __x137))) (:and __x136 __x138)))))))))))))
(:test (__x139 __x140) (let ((__x141 (:eq __x139 __x140))) (if __x141 (:print 1) (let ((__x142 (:print __x139))) (:print __x140)))))
(:print (__x143) (print __x143))
(:identity (__x144) __x144))