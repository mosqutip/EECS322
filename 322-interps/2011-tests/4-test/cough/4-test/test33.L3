((let ((__x0 (new-tuple 1 2 3 4 5 6))) (let ((__x1 (:tolist __x0))) (let ((__x2 (:foldl :add 0 __x1))) (:test __x2 21))))
(:tolist (__x3) (:tolisthelper __x3 0))
(:tolisthelper (__x4 __x5) (let ((__x6 (alen __x4))) (let ((__x7 (<= __x6 __x5))) (if __x7 (:nil) (let ((__x8 (aref __x4 __x5))) (let ((__x9 (+ 1 __x5))) (let ((__x10 (:tolisthelper __x4 __x9))) (:cons __x8 __x10))))))))
(:foreach (__x11 __x12) (let ((__x13 (:empty __x11))) (if __x13 1 (let ((__x15 (:head __x11))) (let ((__x14 (__x12 __x15))) (let ((__x16 (:tail __x11))) (:foreach __x16 __x12)))))))
(:map (__x17 __x18) (let ((__x19 (:empty __x17))) (if __x19 (:nil) (let ((__x20 (:head __x17))) (let ((__x21 (__x18 __x20))) (let ((__x22 (:tail __x17))) (let ((__x23 (:map __x22 __x18))) (:cons __x21 __x23))))))))
(:filter (__x24 __x25) (let ((__x26 (:empty __x24))) (if __x26 (new-tuple ) (let ((__x27 (:head __x24))) (let ((__x28 (__x25 __x27))) (if __x28 (let ((__x29 (:head __x24))) (let ((__x30 (:tail __x24))) (let ((__x31 (:filter __x30 __x25))) (:cons __x29 __x31)))) (let ((__x32 (:tail __x24))) (:filter __x32 __x25))))))))
(:foldl (__x33 __x34 __x35) (let ((__x36 (:empty __x35))) (if __x36 __x34 (let ((__x37 (:head __x35))) (let ((__x38 (__x33 __x34 __x37))) (let ((__x39 (:tail __x35))) (:foldl __x33 __x38 __x39)))))))
(:zip (__x40 __x41) (let ((__x42 (:empty __x40))) (if __x42 (:nil) (let ((__x43 (:empty __x41))) (if __x43 (:nil) (let ((__x44 (:head __x40))) (let ((__x45 (:head __x41))) (let ((__x46 (:nil))) (let ((__x47 (:cons __x45 __x46))) (let ((__x48 (:cons __x44 __x47))) (let ((__x49 (:tail __x40))) (let ((__x50 (:tail __x41))) (let ((__x51 (:zip __x49 __x50))) (:cons __x48 __x51))))))))))))))
(:find (__x52 __x53) (let ((__x54 (:empty __x52))) (if __x54 (:none) (let ((__x55 (:head __x52))) (let ((__x56 (__x53 __x55))) (if __x56 (let ((__x57 (:head __x52))) (:some __x57)) (let ((__x58 (:tail __x52))) (:find __x58 __x53))))))))
(:sq (__x59) (* __x59 __x59))
(:double (__x60) (+ __x60 __x60))
(:sqdouble (__x61) (let ((__x62 (:double __x61))) (let ((__x63 (:double __x61))) (* __x62 __x63))))
(:greaterthan3 (__x64) (< 3 __x64))
(:add (__x65 __x66) (+ __x65 __x66))
(:mult (__x67 __x68) (* __x67 __x68))
(:some (__x69) (let ((__x70 (new-tuple __x69))) (:tolist __x70)))
(:none () (new-tuple ))
(:option_get (__x71) (aref __x71 0))
(:nil () (new-tuple ))
(:cons (__x72 __x73) (new-tuple __x72 __x73))
(:head (__x74) (aref __x74 0))
(:tail (__x75) (aref __x75 1))
(:empty (__x76) (let ((__x77 (alen __x76))) (= 0 __x77)))
(:size (__x78) (let ((__x79 (:empty __x78))) (if __x79 0 (let ((__x80 (:tail __x78))) (let ((__x81 (:size __x80))) (+ 1 __x81))))))
(:contains (__x82 __x83) (let ((__x84 (:empty __x83))) (if __x84 0 (let ((__x85 (:head __x83))) (let ((__x86 (= __x82 __x85))) (if __x86 1 (let ((__x87 (:tail __x83))) (:contains __x82 __x87))))))))
(:not (__x88) (if __x88 0 1))
(:and (__x89 __x90) (if __x89 (if __x90 1 0) 0))
(:or (__x91 __x92) (if __x91 1 (if __x92 1 0)))
(:eq (__x93 __x94) (let ((__x95 (a? __x93))) (let ((__x96 (a? __x94))) (let ((__x97 (:and __x95 __x96))) (if __x97 (:eq_list __x93 __x94) (let ((__x98 (number? __x93))) (let ((__x99 (number? __x94))) (let ((__x100 (:and __x98 __x99))) (if __x100 (= __x93 __x94) 0)))))))))
(:eq_num (__x101 __x102) (= __x101 __x102))
(:eq_list (__x103 __x104) (let ((__x105 (:empty __x103))) (let ((__x106 (:empty __x104))) (let ((__x107 (:and __x105 __x106))) (if __x107 1 (let ((__x108 (:empty __x103))) (let ((__x109 (:empty __x104))) (let ((__x110 (:or __x108 __x109))) (if __x110 0 (let ((__x111 (:head __x103))) (let ((__x112 (:head __x104))) (let ((__x113 (:eq __x111 __x112))) (let ((__x114 (:tail __x103))) (let ((__x115 (:tail __x104))) (let ((__x116 (:eq_list __x114 __x115))) (:and __x113 __x116))))))))))))))))
(:eq_arr (__x117 __x118) (let ((__x119 (alen __x117))) (let ((__x120 (alen __x118))) (let ((__x121 (= __x119 __x120))) (if __x121 (:eq_arr_helper __x117 __x118 0) 0)))))
(:eq_arr_helper (__x122 __x123 __x124) (let ((__x125 (alen __x122))) (let ((__x126 (= __x125 __x124))) (let ((__x127 (alen __x123))) (let ((__x128 (= __x127 __x124))) (let ((__x129 (:and __x126 __x128))) (if __x129 1 (let ((__x130 (aref __x122 __x124))) (let ((__x131 (aref __x123 __x124))) (let ((__x132 (:eq __x130 __x131))) (let ((__x133 (+ 1 __x124))) (let ((__x134 (:eq_arr_helper __x122 __x123 __x133))) (:and __x132 __x134)))))))))))))
(:test (__x135 __x136) (let ((__x137 (:eq __x135 __x136))) (if __x137 (:print 1) (let ((__x138 (:print __x135))) (:print __x136)))))
(:print (__x139) (print __x139))
(:identity (__x140) __x140))