((:test (:eq_arr (new-array 5 5) (new-tuple 5 5 5 5 5)) 1)


  (:tolist (arr) (:tolisthelper arr 0))
  (:tolisthelper (arr index)
    (if
      (<= (alen arr) index)
      (:nil)
      (:cons (aref arr index) (:tolisthelper arr (+ 1 index)))
    )
  )
  (:foreach (list f)
    (if (:empty list)
      1
      (begin (f (:head list)) (:foreach (:tail list) f))
    )
  )
  (:map (list f)
    (if (:empty list)
      (:nil)
      (:cons (f (:head list)) (:map (:tail list) f))
    )
  )
  (:filter (list p)
    (if (:empty list)
      (new-tuple)
      (if (p (:head list))
        (:cons (:head list) (:filter (:tail list) p))
        (:filter (:tail list) p)
      )
    )
  )
  (:foldl (f init list)
    (if (:empty list)
      init
      (:foldl f (f init (:head list)) (:tail list))
    )
  )
  (:zip (list1 list2)
    (if (:empty list1)
      (:nil)
      (if (:empty list2)
        (:nil)
        (:cons (:cons (:head list1) (:cons (:head list2) (:nil))) (:zip (:tail list1) (:tail list2)))
      )
    )
  )
  (:find (list p)
    (if (:empty list)
      (:none)
      (if (p (:head list))
        (:some (:head list))
        (:find (:tail list) p)
      )
    )
  )
  (:sq (x) (* x x))
  (:double (x) (+ x x))
  (:sqdouble (x) (* (:double x) (:double x)))
  (:greaterthan3 (x) (< 3 x))
  (:add (x y) (+ x y))
  (:mult (x y) (* x y))
  (:some (x) (:tolist (new-tuple x)))
  (:none () (new-tuple))
  (:option_get (op) (aref op 0))
  (:nil () (new-tuple))
  (:cons (x list) (new-tuple x list))
  (:head (list) (aref list 0))
  (:tail (list) (aref list 1))
  (:empty (list) (= 0 (alen list)))
  (:size (list) (if (:empty list) 0 (+ 1 (:size (:tail list)))))
  (:contains (item list)
    (if (:empty list)
      0
      (if (= item (:head list))
        1
        (:contains item (:tail list))
      )
    )
  )
  (:not (x) (if x 0 1))
  (:and (x y) (if x (if y 1 0) 0))
  (:or (x y) (if x 1 (if y 1 0)))
  (:eq (x y)
    (if (:and (a? x) (a? y))
      (:eq_list x y)
      (if (:and (number? x) (number? y))
        (= x y)
        0
      )
    )
  )
  (:eq_num (x y) (= x y))
  (:eq_list (x y)
    (if (:and (:empty x) (:empty y))
      1
      (if (:or (:empty x) (:empty y))
        0
        (:and (:eq (:head x) (:head y)) (:eq_list (:tail x) (:tail y)))
      )
    )
  )
  (:eq_arr (x y)
    (if (= (alen x) (alen y))
      (:eq_arr_helper x y 0)
      0
    )
  )
  (:eq_arr_helper (x y index)
    (if (:and (= (alen x) index) (= (alen y) index))
      1
      (:and
        (:eq (aref x index) (aref y index))
        (:eq_arr_helper x y (+ 1 index))
      )
    )
  )
  (:test (actual expected)
    (if (:eq actual expected)
      (:print 1)
      (begin (:print actual) (:print expected))
    )
  )
  (:print (x) (print x))
  (:identity (x) x)
)