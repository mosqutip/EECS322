((let ((__x8 (:and 1 1))) (let ((__x7 7)) (let ((__x11 6)) (let ((__x10 7)) (let ((__x12 8)) (let ((__x9 9)) (let ((__x6 9)) (let ((__x13 (:nil))) (let ((__x5 (:map __x13 :sq))) (let ((__x14 8)) (let ((__x4 9)) (let ((__x17 (new-tuple 1 2 3 4 5 6))) (let ((__x18 (:tolist __x17))) (let ((__x16 (:foldl :add 0 __x18))) (let ((__x15 7)) (let ((__x19 (:sq 7))) (let ((__x3 9)) (let ((__x22 6)) (let ((__x21 7)) (let ((__x26 (:nil))) (let ((__x27 (:cons 3 __x26))) (let ((__x28 (:cons 2 __x27))) (let ((__x25 (:cons 1 __x28))) (let ((__x24 7)) (let ((__x30 (< 4 3))) (if __x30 (let ((__x29 5)) (let ((__x23 9)) (let ((__x20 9)) (let ((__x32 6)) (let ((__x31 7)) (let ((__x33 8)) (let ((__x2 9)) (let ((__x36 (new-array 5 5))) (let ((__x37 (new-tuple 5 5 5 5 5))) (let ((__x35 (:eq_arr __x36 __x37))) (let ((__x34 7)) (let ((__x40 (:nil))) (let ((__x39 (< 7 7))) (let ((__x41 (= 5 6))) (let ((__x38 (<= 7 8))) (let ((__x1 9)) (let ((__x45 (= 5 6))) (let ((__x46 (= 5 __x45))) (let ((__x44 (= 5 __x46))) (let ((__x43 7)) (let ((__x48 (new-tuple ))) (let ((__x49 (new-tuple __x48))) (let ((__x50 (new-tuple ))) (let ((__x51 (new-tuple __x50))) (let ((__x52 (new-tuple ))) (let ((__x47 (new-tuple __x49 __x51 __x52))) (let ((__x42 9)) (let ((__x57 (new-array 5 5))) (let ((__x58 (alen __x57))) (let ((__x59 (<= 7 __x58))) (let ((__x60 (= 7 __x59))) (let ((__x56 (< 7 __x60))) (let ((__x55 (new-tuple ))) (let ((__x61 8)) (let ((__x54 9)) (let ((__x64 (new-tuple 1 2 3 4))) (let ((__x65 (new-tuple 1 2 3 4))) (let ((__x63 (:eq_arr __x64 __x65))) (let ((__x62 7)) (let ((__x66 (make-closure :sq 7))) (let ((__x53 9)) (let ((__x70 (make-closure :sq 7))) (let ((__x69 (closure-vars __x70))) (let ((__x71 (new-tuple 1 2 3))) (let ((__x68 (:tolist __x71))) (let ((__x73 (make-closure :sq 7))) (let ((__x72 (closure-proc __x73))) (let ((__x67 9)) (let ((__x75 6)) (let ((__x74 7)) (let ((__x76 8)) (let ((__x77 (:sq 3))) (let ((__x0 (:double __x77))) (let ((__x78 (:identity __x0))) (:test __x78 18))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((__x29 6)) (let ((__x23 9)) (let ((__x20 9)) (let ((__x80 6)) (let ((__x79 7)) (let ((__x81 8)) (let ((__x2 9)) (let ((__x84 (new-array 5 5))) (let ((__x85 (new-tuple 5 5 5 5 5))) (let ((__x83 (:eq_arr __x84 __x85))) (let ((__x82 7)) (let ((__x88 (:nil))) (let ((__x87 (< 7 7))) (let ((__x89 (= 5 6))) (let ((__x86 (<= 7 8))) (let ((__x1 9)) (let ((__x93 (= 5 6))) (let ((__x94 (= 5 __x93))) (let ((__x92 (= 5 __x94))) (let ((__x91 7)) (let ((__x96 (new-tuple ))) (let ((__x97 (new-tuple __x96))) (let ((__x98 (new-tuple ))) (let ((__x99 (new-tuple __x98))) (let ((__x100 (new-tuple ))) (let ((__x95 (new-tuple __x97 __x99 __x100))) (let ((__x90 9)) (let ((__x105 (new-array 5 5))) (let ((__x106 (alen __x105))) (let ((__x107 (<= 7 __x106))) (let ((__x108 (= 7 __x107))) (let ((__x104 (< 7 __x108))) (let ((__x103 (new-tuple ))) (let ((__x109 8)) (let ((__x102 9)) (let ((__x112 (new-tuple 1 2 3 4))) (let ((__x113 (new-tuple 1 2 3 4))) (let ((__x111 (:eq_arr __x112 __x113))) (let ((__x110 7)) (let ((__x114 (make-closure :sq 7))) (let ((__x101 9)) (let ((__x118 (make-closure :sq 7))) (let ((__x117 (closure-vars __x118))) (let ((__x119 (new-tuple 1 2 3))) (let ((__x116 (:tolist __x119))) (let ((__x121 (make-closure :sq 7))) (let ((__x120 (closure-proc __x121))) (let ((__x115 9)) (let ((__x123 6)) (let ((__x122 7)) (let ((__x124 8)) (let ((__x125 (:sq 3))) (let ((__x0 (:double __x125))) (let ((__x126 (:identity __x0))) (:test __x126 18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(:tolist (__x127) (:tolisthelper __x127 0))
(:tolisthelper (__x128 __x129) (let ((__x130 (alen __x128))) (let ((__x131 (<= __x130 __x129))) (if __x131 (:nil) (let ((__x132 (aref __x128 __x129))) (let ((__x133 (+ 1 __x129))) (let ((__x134 (:tolisthelper __x128 __x133))) (:cons __x132 __x134))))))))
(:foreach (__x135 __x136) (let ((__x137 (:empty __x135))) (if __x137 1 (let ((__x139 (:head __x135))) (let ((__x138 (__x136 __x139))) (let ((__x140 (:tail __x135))) (:foreach __x140 __x136)))))))
(:map (__x141 __x142) (let ((__x143 (:empty __x141))) (if __x143 (:nil) (let ((__x144 (:head __x141))) (let ((__x145 (__x142 __x144))) (let ((__x146 (:tail __x141))) (let ((__x147 (:map __x146 __x142))) (:cons __x145 __x147))))))))
(:filter (__x148 __x149) (let ((__x150 (:empty __x148))) (if __x150 (new-tuple ) (let ((__x151 (:head __x148))) (let ((__x152 (__x149 __x151))) (if __x152 (let ((__x153 (:head __x148))) (let ((__x154 (:tail __x148))) (let ((__x155 (:filter __x154 __x149))) (:cons __x153 __x155)))) (let ((__x156 (:tail __x148))) (:filter __x156 __x149))))))))
(:foldl (__x157 __x158 __x159) (let ((__x160 (:empty __x159))) (if __x160 __x158 (let ((__x161 (:head __x159))) (let ((__x162 (__x157 __x158 __x161))) (let ((__x163 (:tail __x159))) (:foldl __x157 __x162 __x163)))))))
(:zip (__x164 __x165) (let ((__x166 (:empty __x164))) (if __x166 (:nil) (let ((__x167 (:empty __x165))) (if __x167 (:nil) (let ((__x168 (:head __x164))) (let ((__x169 (:head __x165))) (let ((__x170 (:nil))) (let ((__x171 (:cons __x169 __x170))) (let ((__x172 (:cons __x168 __x171))) (let ((__x173 (:tail __x164))) (let ((__x174 (:tail __x165))) (let ((__x175 (:zip __x173 __x174))) (:cons __x172 __x175))))))))))))))
(:find (__x176 __x177) (let ((__x178 (:empty __x176))) (if __x178 (:none) (let ((__x179 (:head __x176))) (let ((__x180 (__x177 __x179))) (if __x180 (let ((__x181 (:head __x176))) (:some __x181)) (let ((__x182 (:tail __x176))) (:find __x182 __x177))))))))
(:sq (__x183) (* __x183 __x183))
(:double (__x184) (+ __x184 __x184))
(:sqdouble (__x185) (let ((__x186 (:double __x185))) (let ((__x187 (:double __x185))) (* __x186 __x187))))
(:greaterthan3 (__x188) (< 3 __x188))
(:add (__x189 __x190) (+ __x189 __x190))
(:mult (__x191 __x192) (* __x191 __x192))
(:some (__x193) (let ((__x194 (new-tuple __x193))) (:tolist __x194)))
(:none () (new-tuple ))
(:option_get (__x195) (aref __x195 0))
(:nil () (new-tuple ))
(:cons (__x196 __x197) (new-tuple __x196 __x197))
(:head (__x198) (aref __x198 0))
(:tail (__x199) (aref __x199 1))
(:empty (__x200) (let ((__x201 (alen __x200))) (= 0 __x201)))
(:size (__x202) (let ((__x203 (:empty __x202))) (if __x203 0 (let ((__x204 (:tail __x202))) (let ((__x205 (:size __x204))) (+ 1 __x205))))))
(:contains (__x206 __x207) (let ((__x208 (:empty __x207))) (if __x208 0 (let ((__x209 (:head __x207))) (let ((__x210 (= __x206 __x209))) (if __x210 1 (let ((__x211 (:tail __x207))) (:contains __x206 __x211))))))))
(:not (__x212) (if __x212 0 1))
(:and (__x213 __x214) (if __x213 (if __x214 1 0) 0))
(:or (__x215 __x216) (if __x215 1 (if __x216 1 0)))
(:eq (__x217 __x218) (let ((__x219 (a? __x217))) (let ((__x220 (a? __x218))) (let ((__x221 (:and __x219 __x220))) (if __x221 (:eq_list __x217 __x218) (let ((__x222 (number? __x217))) (let ((__x223 (number? __x218))) (let ((__x224 (:and __x222 __x223))) (if __x224 (= __x217 __x218) 0)))))))))
(:eq_num (__x225 __x226) (= __x225 __x226))
(:eq_list (__x227 __x228) (let ((__x229 (:empty __x227))) (let ((__x230 (:empty __x228))) (let ((__x231 (:and __x229 __x230))) (if __x231 1 (let ((__x232 (:empty __x227))) (let ((__x233 (:empty __x228))) (let ((__x234 (:or __x232 __x233))) (if __x234 0 (let ((__x235 (:head __x227))) (let ((__x236 (:head __x228))) (let ((__x237 (:eq __x235 __x236))) (let ((__x238 (:tail __x227))) (let ((__x239 (:tail __x228))) (let ((__x240 (:eq_list __x238 __x239))) (:and __x237 __x240))))))))))))))))
(:eq_arr (__x241 __x242) (let ((__x243 (alen __x241))) (let ((__x244 (alen __x242))) (let ((__x245 (= __x243 __x244))) (if __x245 (:eq_arr_helper __x241 __x242 0) 0)))))
(:eq_arr_helper (__x246 __x247 __x248) (let ((__x249 (alen __x246))) (let ((__x250 (= __x249 __x248))) (let ((__x251 (alen __x247))) (let ((__x252 (= __x251 __x248))) (let ((__x253 (:and __x250 __x252))) (if __x253 1 (let ((__x254 (aref __x246 __x248))) (let ((__x255 (aref __x247 __x248))) (let ((__x256 (:eq __x254 __x255))) (let ((__x257 (+ 1 __x248))) (let ((__x258 (:eq_arr_helper __x246 __x247 __x257))) (:and __x256 __x258)))))))))))))
(:test (__x259 __x260) (let ((__x261 (:eq __x259 __x260))) (if __x261 (:print 1) (let ((__x262 (:print __x259))) (:print __x260)))))
(:print (__x263) (print __x263))
(:identity (__x264) __x264))