((let ((__x0 (new-tuple 1 2 2 2 2 2 2))) (let ((__x1 (:tolist __x0))) (let ((__x2 (:find __x1 :greaterthan3))) (let ((__x3 (:none))) (:test __x2 __x3)))))
(:tolist (__x4) (:tolisthelper __x4 0))
(:tolisthelper (__x5 __x6) (let ((__x7 (alen __x5))) (let ((__x8 (<= __x7 __x6))) (if __x8 (:nil) (let ((__x9 (aref __x5 __x6))) (let ((__x10 (+ 1 __x6))) (let ((__x11 (:tolisthelper __x5 __x10))) (:cons __x9 __x11))))))))
(:foreach (__x12 __x13) (let ((__x14 (:empty __x12))) (if __x14 1 (let ((__x16 (:head __x12))) (let ((__x15 (__x13 __x16))) (let ((__x17 (:tail __x12))) (:foreach __x17 __x13)))))))
(:map (__x18 __x19) (let ((__x20 (:empty __x18))) (if __x20 (:nil) (let ((__x21 (:head __x18))) (let ((__x22 (__x19 __x21))) (let ((__x23 (:tail __x18))) (let ((__x24 (:map __x23 __x19))) (:cons __x22 __x24))))))))
(:filter (__x25 __x26) (let ((__x27 (:empty __x25))) (if __x27 (new-tuple ) (let ((__x28 (:head __x25))) (let ((__x29 (__x26 __x28))) (if __x29 (let ((__x30 (:head __x25))) (let ((__x31 (:tail __x25))) (let ((__x32 (:filter __x31 __x26))) (:cons __x30 __x32)))) (let ((__x33 (:tail __x25))) (:filter __x33 __x26))))))))
(:foldl (__x34 __x35 __x36) (let ((__x37 (:empty __x36))) (if __x37 __x35 (let ((__x38 (:head __x36))) (let ((__x39 (__x34 __x35 __x38))) (let ((__x40 (:tail __x36))) (:foldl __x34 __x39 __x40)))))))
(:zip (__x41 __x42) (let ((__x43 (:empty __x41))) (if __x43 (:nil) (let ((__x44 (:empty __x42))) (if __x44 (:nil) (let ((__x45 (:head __x41))) (let ((__x46 (:head __x42))) (let ((__x47 (:nil))) (let ((__x48 (:cons __x46 __x47))) (let ((__x49 (:cons __x45 __x48))) (let ((__x50 (:tail __x41))) (let ((__x51 (:tail __x42))) (let ((__x52 (:zip __x50 __x51))) (:cons __x49 __x52))))))))))))))
(:find (__x53 __x54) (let ((__x55 (:empty __x53))) (if __x55 (:none) (let ((__x56 (:head __x53))) (let ((__x57 (__x54 __x56))) (if __x57 (let ((__x58 (:head __x53))) (:some __x58)) (let ((__x59 (:tail __x53))) (:find __x59 __x54))))))))
(:sq (__x60) (* __x60 __x60))
(:double (__x61) (+ __x61 __x61))
(:sqdouble (__x62) (let ((__x63 (:double __x62))) (let ((__x64 (:double __x62))) (* __x63 __x64))))
(:greaterthan3 (__x65) (< 3 __x65))
(:add (__x66 __x67) (+ __x66 __x67))
(:mult (__x68 __x69) (* __x68 __x69))
(:some (__x70) (let ((__x71 (new-tuple __x70))) (:tolist __x71)))
(:none () (new-tuple ))
(:option_get (__x72) (aref __x72 0))
(:nil () (new-tuple ))
(:cons (__x73 __x74) (new-tuple __x73 __x74))
(:head (__x75) (aref __x75 0))
(:tail (__x76) (aref __x76 1))
(:empty (__x77) (let ((__x78 (alen __x77))) (= 0 __x78)))
(:size (__x79) (let ((__x80 (:empty __x79))) (if __x80 0 (let ((__x81 (:tail __x79))) (let ((__x82 (:size __x81))) (+ 1 __x82))))))
(:contains (__x83 __x84) (let ((__x85 (:empty __x84))) (if __x85 0 (let ((__x86 (:head __x84))) (let ((__x87 (= __x83 __x86))) (if __x87 1 (let ((__x88 (:tail __x84))) (:contains __x83 __x88))))))))
(:not (__x89) (if __x89 0 1))
(:and (__x90 __x91) (if __x90 (if __x91 1 0) 0))
(:or (__x92 __x93) (if __x92 1 (if __x93 1 0)))
(:eq (__x94 __x95) (let ((__x96 (a? __x94))) (let ((__x97 (a? __x95))) (let ((__x98 (:and __x96 __x97))) (if __x98 (:eq_list __x94 __x95) (let ((__x99 (number? __x94))) (let ((__x100 (number? __x95))) (let ((__x101 (:and __x99 __x100))) (if __x101 (= __x94 __x95) 0)))))))))
(:eq_num (__x102 __x103) (= __x102 __x103))
(:eq_list (__x104 __x105) (let ((__x106 (:empty __x104))) (let ((__x107 (:empty __x105))) (let ((__x108 (:and __x106 __x107))) (if __x108 1 (let ((__x109 (:empty __x104))) (let ((__x110 (:empty __x105))) (let ((__x111 (:or __x109 __x110))) (if __x111 0 (let ((__x112 (:head __x104))) (let ((__x113 (:head __x105))) (let ((__x114 (:eq __x112 __x113))) (let ((__x115 (:tail __x104))) (let ((__x116 (:tail __x105))) (let ((__x117 (:eq_list __x115 __x116))) (:and __x114 __x117))))))))))))))))
(:eq_arr (__x118 __x119) (let ((__x120 (alen __x118))) (let ((__x121 (alen __x119))) (let ((__x122 (= __x120 __x121))) (if __x122 (:eq_arr_helper __x118 __x119 0) 0)))))
(:eq_arr_helper (__x123 __x124 __x125) (let ((__x126 (alen __x123))) (let ((__x127 (= __x126 __x125))) (let ((__x128 (alen __x124))) (let ((__x129 (= __x128 __x125))) (let ((__x130 (:and __x127 __x129))) (if __x130 1 (let ((__x131 (aref __x123 __x125))) (let ((__x132 (aref __x124 __x125))) (let ((__x133 (:eq __x131 __x132))) (let ((__x134 (+ 1 __x125))) (let ((__x135 (:eq_arr_helper __x123 __x124 __x134))) (:and __x133 __x135)))))))))))))
(:test (__x136 __x137) (let ((__x138 (:eq __x136 __x137))) (if __x138 (:print 1) (let ((__x139 (:print __x136))) (:print __x137)))))
(:print (__x140) (print __x140))
(:identity (__x141) __x141))