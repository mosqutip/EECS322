((let ((__x0 (:none))) (let ((__x1 (:none))) (:test __x0 __x1)))
(:tolist (__x2) (:tolisthelper __x2 0))
(:tolisthelper (__x3 __x4) (let ((__x5 (alen __x3))) (let ((__x6 (<= __x5 __x4))) (if __x6 (:nil) (let ((__x7 (aref __x3 __x4))) (let ((__x8 (+ 1 __x4))) (let ((__x9 (:tolisthelper __x3 __x8))) (:cons __x7 __x9))))))))
(:foreach (__x10 __x11) (let ((__x12 (:empty __x10))) (if __x12 1 (let ((__x14 (:head __x10))) (let ((__x13 (__x11 __x14))) (let ((__x15 (:tail __x10))) (:foreach __x15 __x11)))))))
(:map (__x16 __x17) (let ((__x18 (:empty __x16))) (if __x18 (:nil) (let ((__x19 (:head __x16))) (let ((__x20 (__x17 __x19))) (let ((__x21 (:tail __x16))) (let ((__x22 (:map __x21 __x17))) (:cons __x20 __x22))))))))
(:filter (__x23 __x24) (let ((__x25 (:empty __x23))) (if __x25 (new-tuple ) (let ((__x26 (:head __x23))) (let ((__x27 (__x24 __x26))) (if __x27 (let ((__x28 (:head __x23))) (let ((__x29 (:tail __x23))) (let ((__x30 (:filter __x29 __x24))) (:cons __x28 __x30)))) (let ((__x31 (:tail __x23))) (:filter __x31 __x24))))))))
(:foldl (__x32 __x33 __x34) (let ((__x35 (:empty __x34))) (if __x35 __x33 (let ((__x36 (:head __x34))) (let ((__x37 (__x32 __x33 __x36))) (let ((__x38 (:tail __x34))) (:foldl __x32 __x37 __x38)))))))
(:zip (__x39 __x40) (let ((__x41 (:empty __x39))) (if __x41 (:nil) (let ((__x42 (:empty __x40))) (if __x42 (:nil) (let ((__x43 (:head __x39))) (let ((__x44 (:head __x40))) (let ((__x45 (:nil))) (let ((__x46 (:cons __x44 __x45))) (let ((__x47 (:cons __x43 __x46))) (let ((__x48 (:tail __x39))) (let ((__x49 (:tail __x40))) (let ((__x50 (:zip __x48 __x49))) (:cons __x47 __x50))))))))))))))
(:find (__x51 __x52) (let ((__x53 (:empty __x51))) (if __x53 (:none) (let ((__x54 (:head __x51))) (let ((__x55 (__x52 __x54))) (if __x55 (let ((__x56 (:head __x51))) (:some __x56)) (let ((__x57 (:tail __x51))) (:find __x57 __x52))))))))
(:sq (__x58) (* __x58 __x58))
(:double (__x59) (+ __x59 __x59))
(:sqdouble (__x60) (let ((__x61 (:double __x60))) (let ((__x62 (:double __x60))) (* __x61 __x62))))
(:greaterthan3 (__x63) (< 3 __x63))
(:add (__x64 __x65) (+ __x64 __x65))
(:mult (__x66 __x67) (* __x66 __x67))
(:some (__x68) (let ((__x69 (new-tuple __x68))) (:tolist __x69)))
(:none () (new-tuple ))
(:option_get (__x70) (aref __x70 0))
(:nil () (new-tuple ))
(:cons (__x71 __x72) (new-tuple __x71 __x72))
(:head (__x73) (aref __x73 0))
(:tail (__x74) (aref __x74 1))
(:empty (__x75) (let ((__x76 (alen __x75))) (= 0 __x76)))
(:size (__x77) (let ((__x78 (:empty __x77))) (if __x78 0 (let ((__x79 (:tail __x77))) (let ((__x80 (:size __x79))) (+ 1 __x80))))))
(:contains (__x81 __x82) (let ((__x83 (:empty __x82))) (if __x83 0 (let ((__x84 (:head __x82))) (let ((__x85 (= __x81 __x84))) (if __x85 1 (let ((__x86 (:tail __x82))) (:contains __x81 __x86))))))))
(:not (__x87) (if __x87 0 1))
(:and (__x88 __x89) (if __x88 (if __x89 1 0) 0))
(:or (__x90 __x91) (if __x90 1 (if __x91 1 0)))
(:eq (__x92 __x93) (let ((__x94 (a? __x92))) (let ((__x95 (a? __x93))) (let ((__x96 (:and __x94 __x95))) (if __x96 (:eq_list __x92 __x93) (let ((__x97 (number? __x92))) (let ((__x98 (number? __x93))) (let ((__x99 (:and __x97 __x98))) (if __x99 (= __x92 __x93) 0)))))))))
(:eq_num (__x100 __x101) (= __x100 __x101))
(:eq_list (__x102 __x103) (let ((__x104 (:empty __x102))) (let ((__x105 (:empty __x103))) (let ((__x106 (:and __x104 __x105))) (if __x106 1 (let ((__x107 (:empty __x102))) (let ((__x108 (:empty __x103))) (let ((__x109 (:or __x107 __x108))) (if __x109 0 (let ((__x110 (:head __x102))) (let ((__x111 (:head __x103))) (let ((__x112 (:eq __x110 __x111))) (let ((__x113 (:tail __x102))) (let ((__x114 (:tail __x103))) (let ((__x115 (:eq_list __x113 __x114))) (:and __x112 __x115))))))))))))))))
(:eq_arr (__x116 __x117) (let ((__x118 (alen __x116))) (let ((__x119 (alen __x117))) (let ((__x120 (= __x118 __x119))) (if __x120 (:eq_arr_helper __x116 __x117 0) 0)))))
(:eq_arr_helper (__x121 __x122 __x123) (let ((__x124 (alen __x121))) (let ((__x125 (= __x124 __x123))) (let ((__x126 (alen __x122))) (let ((__x127 (= __x126 __x123))) (let ((__x128 (:and __x125 __x127))) (if __x128 1 (let ((__x129 (aref __x121 __x123))) (let ((__x130 (aref __x122 __x123))) (let ((__x131 (:eq __x129 __x130))) (let ((__x132 (+ 1 __x123))) (let ((__x133 (:eq_arr_helper __x121 __x122 __x132))) (:and __x131 __x133)))))))))))))
(:test (__x134 __x135) (let ((__x136 (:eq __x134 __x135))) (if __x136 (:print 1) (let ((__x137 (:print __x134))) (:print __x135)))))
(:print (__x138) (print __x138))
(:identity (__x139) __x139))