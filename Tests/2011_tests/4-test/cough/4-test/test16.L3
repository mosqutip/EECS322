((let ((__x0 (make-closure :sq 7))) (let ((__x1 (make-closure :double 7))) (let ((__x2 (closure-proc __x0))) (let ((__x3 (closure-vars __x0))) (let ((__x4 (__x2 __x3))) (let ((__x5 (closure-proc __x1))) (let ((__x6 (closure-vars __x1))) (let ((__x7 (__x5 __x6))) (let ((__x8 (+ __x4 __x7))) (let ((__x9 (:sqdouble __x8))) (:test __x9 15876)))))))))))
(:tolist (__x10) (:tolisthelper __x10 0))
(:tolisthelper (__x11 __x12) (let ((__x13 (alen __x11))) (let ((__x14 (<= __x13 __x12))) (if __x14 (:nil) (let ((__x15 (aref __x11 __x12))) (let ((__x16 (+ 1 __x12))) (let ((__x17 (:tolisthelper __x11 __x16))) (:cons __x15 __x17))))))))
(:foreach (__x18 __x19) (let ((__x20 (:empty __x18))) (if __x20 1 (let ((__x22 (:head __x18))) (let ((__x21 (__x19 __x22))) (let ((__x23 (:tail __x18))) (:foreach __x23 __x19)))))))
(:map (__x24 __x25) (let ((__x26 (:empty __x24))) (if __x26 (:nil) (let ((__x27 (:head __x24))) (let ((__x28 (__x25 __x27))) (let ((__x29 (:tail __x24))) (let ((__x30 (:map __x29 __x25))) (:cons __x28 __x30))))))))
(:filter (__x31 __x32) (let ((__x33 (:empty __x31))) (if __x33 (new-tuple ) (let ((__x34 (:head __x31))) (let ((__x35 (__x32 __x34))) (if __x35 (let ((__x36 (:head __x31))) (let ((__x37 (:tail __x31))) (let ((__x38 (:filter __x37 __x32))) (:cons __x36 __x38)))) (let ((__x39 (:tail __x31))) (:filter __x39 __x32))))))))
(:foldl (__x40 __x41 __x42) (let ((__x43 (:empty __x42))) (if __x43 __x41 (let ((__x44 (:head __x42))) (let ((__x45 (__x40 __x41 __x44))) (let ((__x46 (:tail __x42))) (:foldl __x40 __x45 __x46)))))))
(:zip (__x47 __x48) (let ((__x49 (:empty __x47))) (if __x49 (:nil) (let ((__x50 (:empty __x48))) (if __x50 (:nil) (let ((__x51 (:head __x47))) (let ((__x52 (:head __x48))) (let ((__x53 (:nil))) (let ((__x54 (:cons __x52 __x53))) (let ((__x55 (:cons __x51 __x54))) (let ((__x56 (:tail __x47))) (let ((__x57 (:tail __x48))) (let ((__x58 (:zip __x56 __x57))) (:cons __x55 __x58))))))))))))))
(:find (__x59 __x60) (let ((__x61 (:empty __x59))) (if __x61 (:none) (let ((__x62 (:head __x59))) (let ((__x63 (__x60 __x62))) (if __x63 (let ((__x64 (:head __x59))) (:some __x64)) (let ((__x65 (:tail __x59))) (:find __x65 __x60))))))))
(:sq (__x66) (* __x66 __x66))
(:double (__x67) (+ __x67 __x67))
(:sqdouble (__x68) (let ((__x69 (:double __x68))) (let ((__x70 (:double __x68))) (* __x69 __x70))))
(:greaterthan3 (__x71) (< 3 __x71))
(:add (__x72 __x73) (+ __x72 __x73))
(:mult (__x74 __x75) (* __x74 __x75))
(:some (__x76) (let ((__x77 (new-tuple __x76))) (:tolist __x77)))
(:none () (new-tuple ))
(:option_get (__x78) (aref __x78 0))
(:nil () (new-tuple ))
(:cons (__x79 __x80) (new-tuple __x79 __x80))
(:head (__x81) (aref __x81 0))
(:tail (__x82) (aref __x82 1))
(:empty (__x83) (let ((__x84 (alen __x83))) (= 0 __x84)))
(:size (__x85) (let ((__x86 (:empty __x85))) (if __x86 0 (let ((__x87 (:tail __x85))) (let ((__x88 (:size __x87))) (+ 1 __x88))))))
(:contains (__x89 __x90) (let ((__x91 (:empty __x90))) (if __x91 0 (let ((__x92 (:head __x90))) (let ((__x93 (= __x89 __x92))) (if __x93 1 (let ((__x94 (:tail __x90))) (:contains __x89 __x94))))))))
(:not (__x95) (if __x95 0 1))
(:and (__x96 __x97) (if __x96 (if __x97 1 0) 0))
(:or (__x98 __x99) (if __x98 1 (if __x99 1 0)))
(:eq (__x100 __x101) (let ((__x102 (a? __x100))) (let ((__x103 (a? __x101))) (let ((__x104 (:and __x102 __x103))) (if __x104 (:eq_list __x100 __x101) (let ((__x105 (number? __x100))) (let ((__x106 (number? __x101))) (let ((__x107 (:and __x105 __x106))) (if __x107 (= __x100 __x101) 0)))))))))
(:eq_num (__x108 __x109) (= __x108 __x109))
(:eq_list (__x110 __x111) (let ((__x112 (:empty __x110))) (let ((__x113 (:empty __x111))) (let ((__x114 (:and __x112 __x113))) (if __x114 1 (let ((__x115 (:empty __x110))) (let ((__x116 (:empty __x111))) (let ((__x117 (:or __x115 __x116))) (if __x117 0 (let ((__x118 (:head __x110))) (let ((__x119 (:head __x111))) (let ((__x120 (:eq __x118 __x119))) (let ((__x121 (:tail __x110))) (let ((__x122 (:tail __x111))) (let ((__x123 (:eq_list __x121 __x122))) (:and __x120 __x123))))))))))))))))
(:eq_arr (__x124 __x125) (let ((__x126 (alen __x124))) (let ((__x127 (alen __x125))) (let ((__x128 (= __x126 __x127))) (if __x128 (:eq_arr_helper __x124 __x125 0) 0)))))
(:eq_arr_helper (__x129 __x130 __x131) (let ((__x132 (alen __x129))) (let ((__x133 (= __x132 __x131))) (let ((__x134 (alen __x130))) (let ((__x135 (= __x134 __x131))) (let ((__x136 (:and __x133 __x135))) (if __x136 1 (let ((__x137 (aref __x129 __x131))) (let ((__x138 (aref __x130 __x131))) (let ((__x139 (:eq __x137 __x138))) (let ((__x140 (+ 1 __x131))) (let ((__x141 (:eq_arr_helper __x129 __x130 __x140))) (:and __x139 __x141)))))))))))))
(:test (__x142 __x143) (let ((__x144 (:eq __x142 __x143))) (if __x144 (:print 1) (let ((__x145 (:print __x142))) (:print __x143)))))
(:print (__x146) (print __x146))
(:identity (__x147) __x147))