((let ((__x0 (new-tuple 1 2 3 4))) (let ((__x1 (:tolist __x0))) (let ((__x2 (:map __x1 :sq))) (let ((__x3 (new-tuple 1 4 9 16))) (let ((__x4 (:tolist __x3))) (:test __x2 __x4))))))
(:tolist (__x5) (:tolisthelper __x5 0))
(:tolisthelper (__x6 __x7) (let ((__x8 (alen __x6))) (let ((__x9 (<= __x8 __x7))) (if __x9 (:nil) (let ((__x10 (aref __x6 __x7))) (let ((__x11 (+ 1 __x7))) (let ((__x12 (:tolisthelper __x6 __x11))) (:cons __x10 __x12))))))))
(:foreach (__x13 __x14) (let ((__x15 (:empty __x13))) (if __x15 1 (let ((__x17 (:head __x13))) (let ((__x16 (__x14 __x17))) (let ((__x18 (:tail __x13))) (:foreach __x18 __x14)))))))
(:map (__x19 __x20) (let ((__x21 (:empty __x19))) (if __x21 (:nil) (let ((__x22 (:head __x19))) (let ((__x23 (__x20 __x22))) (let ((__x24 (:tail __x19))) (let ((__x25 (:map __x24 __x20))) (:cons __x23 __x25))))))))
(:filter (__x26 __x27) (let ((__x28 (:empty __x26))) (if __x28 (new-tuple ) (let ((__x29 (:head __x26))) (let ((__x30 (__x27 __x29))) (if __x30 (let ((__x31 (:head __x26))) (let ((__x32 (:tail __x26))) (let ((__x33 (:filter __x32 __x27))) (:cons __x31 __x33)))) (let ((__x34 (:tail __x26))) (:filter __x34 __x27))))))))
(:foldl (__x35 __x36 __x37) (let ((__x38 (:empty __x37))) (if __x38 __x36 (let ((__x39 (:head __x37))) (let ((__x40 (__x35 __x36 __x39))) (let ((__x41 (:tail __x37))) (:foldl __x35 __x40 __x41)))))))
(:zip (__x42 __x43) (let ((__x44 (:empty __x42))) (if __x44 (:nil) (let ((__x45 (:empty __x43))) (if __x45 (:nil) (let ((__x46 (:head __x42))) (let ((__x47 (:head __x43))) (let ((__x48 (:nil))) (let ((__x49 (:cons __x47 __x48))) (let ((__x50 (:cons __x46 __x49))) (let ((__x51 (:tail __x42))) (let ((__x52 (:tail __x43))) (let ((__x53 (:zip __x51 __x52))) (:cons __x50 __x53))))))))))))))
(:find (__x54 __x55) (let ((__x56 (:empty __x54))) (if __x56 (:none) (let ((__x57 (:head __x54))) (let ((__x58 (__x55 __x57))) (if __x58 (let ((__x59 (:head __x54))) (:some __x59)) (let ((__x60 (:tail __x54))) (:find __x60 __x55))))))))
(:sq (__x61) (* __x61 __x61))
(:double (__x62) (+ __x62 __x62))
(:sqdouble (__x63) (let ((__x64 (:double __x63))) (let ((__x65 (:double __x63))) (* __x64 __x65))))
(:greaterthan3 (__x66) (< 3 __x66))
(:add (__x67 __x68) (+ __x67 __x68))
(:mult (__x69 __x70) (* __x69 __x70))
(:some (__x71) (let ((__x72 (new-tuple __x71))) (:tolist __x72)))
(:none () (new-tuple ))
(:option_get (__x73) (aref __x73 0))
(:nil () (new-tuple ))
(:cons (__x74 __x75) (new-tuple __x74 __x75))
(:head (__x76) (aref __x76 0))
(:tail (__x77) (aref __x77 1))
(:empty (__x78) (let ((__x79 (alen __x78))) (= 0 __x79)))
(:size (__x80) (let ((__x81 (:empty __x80))) (if __x81 0 (let ((__x82 (:tail __x80))) (let ((__x83 (:size __x82))) (+ 1 __x83))))))
(:contains (__x84 __x85) (let ((__x86 (:empty __x85))) (if __x86 0 (let ((__x87 (:head __x85))) (let ((__x88 (= __x84 __x87))) (if __x88 1 (let ((__x89 (:tail __x85))) (:contains __x84 __x89))))))))
(:not (__x90) (if __x90 0 1))
(:and (__x91 __x92) (if __x91 (if __x92 1 0) 0))
(:or (__x93 __x94) (if __x93 1 (if __x94 1 0)))
(:eq (__x95 __x96) (let ((__x97 (a? __x95))) (let ((__x98 (a? __x96))) (let ((__x99 (:and __x97 __x98))) (if __x99 (:eq_list __x95 __x96) (let ((__x100 (number? __x95))) (let ((__x101 (number? __x96))) (let ((__x102 (:and __x100 __x101))) (if __x102 (= __x95 __x96) 0)))))))))
(:eq_num (__x103 __x104) (= __x103 __x104))
(:eq_list (__x105 __x106) (let ((__x107 (:empty __x105))) (let ((__x108 (:empty __x106))) (let ((__x109 (:and __x107 __x108))) (if __x109 1 (let ((__x110 (:empty __x105))) (let ((__x111 (:empty __x106))) (let ((__x112 (:or __x110 __x111))) (if __x112 0 (let ((__x113 (:head __x105))) (let ((__x114 (:head __x106))) (let ((__x115 (:eq __x113 __x114))) (let ((__x116 (:tail __x105))) (let ((__x117 (:tail __x106))) (let ((__x118 (:eq_list __x116 __x117))) (:and __x115 __x118))))))))))))))))
(:eq_arr (__x119 __x120) (let ((__x121 (alen __x119))) (let ((__x122 (alen __x120))) (let ((__x123 (= __x121 __x122))) (if __x123 (:eq_arr_helper __x119 __x120 0) 0)))))
(:eq_arr_helper (__x124 __x125 __x126) (let ((__x127 (alen __x124))) (let ((__x128 (= __x127 __x126))) (let ((__x129 (alen __x125))) (let ((__x130 (= __x129 __x126))) (let ((__x131 (:and __x128 __x130))) (if __x131 1 (let ((__x132 (aref __x124 __x126))) (let ((__x133 (aref __x125 __x126))) (let ((__x134 (:eq __x132 __x133))) (let ((__x135 (+ 1 __x126))) (let ((__x136 (:eq_arr_helper __x124 __x125 __x135))) (:and __x134 __x136)))))))))))))
(:test (__x137 __x138) (let ((__x139 (:eq __x137 __x138))) (if __x139 (:print 1) (let ((__x140 (:print __x137))) (:print __x138)))))
(:print (__x141) (print __x141))
(:identity (__x142) __x142))