((let ((__x0 5)) (let ((__x1 10)) (let ((__x2 __x1)) (let ((__x3 :b)) (let ((__x4 (__x3 __x2))) (:test __x4 6))))))
(:b (__x5) 6)
(:tolist (__x6) (:tolisthelper __x6 0))
(:tolisthelper (__x7 __x8) (let ((__x9 (alen __x7))) (let ((__x10 (<= __x9 __x8))) (if __x10 (:nil) (let ((__x11 (aref __x7 __x8))) (let ((__x12 (+ 1 __x8))) (let ((__x13 (:tolisthelper __x7 __x12))) (:cons __x11 __x13))))))))
(:foreach (__x14 __x15) (let ((__x16 (:empty __x14))) (if __x16 1 (let ((__x18 (:head __x14))) (let ((__x17 (__x15 __x18))) (let ((__x19 (:tail __x14))) (:foreach __x19 __x15)))))))
(:map (__x20 __x21) (let ((__x22 (:empty __x20))) (if __x22 (:nil) (let ((__x23 (:head __x20))) (let ((__x24 (__x21 __x23))) (let ((__x25 (:tail __x20))) (let ((__x26 (:map __x25 __x21))) (:cons __x24 __x26))))))))
(:filter (__x27 __x28) (let ((__x29 (:empty __x27))) (if __x29 (new-tuple ) (let ((__x30 (:head __x27))) (let ((__x31 (__x28 __x30))) (if __x31 (let ((__x32 (:head __x27))) (let ((__x33 (:tail __x27))) (let ((__x34 (:filter __x33 __x28))) (:cons __x32 __x34)))) (let ((__x35 (:tail __x27))) (:filter __x35 __x28))))))))
(:foldl (__x36 __x37 __x38) (let ((__x39 (:empty __x38))) (if __x39 __x37 (let ((__x40 (:head __x38))) (let ((__x41 (__x36 __x37 __x40))) (let ((__x42 (:tail __x38))) (:foldl __x36 __x41 __x42)))))))
(:zip (__x43 __x44) (let ((__x45 (:empty __x43))) (if __x45 (:nil) (let ((__x46 (:empty __x44))) (if __x46 (:nil) (let ((__x47 (:head __x43))) (let ((__x48 (:head __x44))) (let ((__x49 (:nil))) (let ((__x50 (:cons __x48 __x49))) (let ((__x51 (:cons __x47 __x50))) (let ((__x52 (:tail __x43))) (let ((__x53 (:tail __x44))) (let ((__x54 (:zip __x52 __x53))) (:cons __x51 __x54))))))))))))))
(:find (__x55 __x56) (let ((__x57 (:empty __x55))) (if __x57 (:none) (let ((__x58 (:head __x55))) (let ((__x59 (__x56 __x58))) (if __x59 (let ((__x60 (:head __x55))) (:some __x60)) (let ((__x61 (:tail __x55))) (:find __x61 __x56))))))))
(:sq (__x62) (* __x62 __x62))
(:double (__x63) (+ __x63 __x63))
(:sqdouble (__x64) (let ((__x65 (:double __x64))) (let ((__x66 (:double __x64))) (* __x65 __x66))))
(:greaterthan3 (__x67) (< 3 __x67))
(:add (__x68 __x69) (+ __x68 __x69))
(:mult (__x70 __x71) (* __x70 __x71))
(:some (__x72) (let ((__x73 (new-tuple __x72))) (:tolist __x73)))
(:none () (new-tuple ))
(:option_get (__x74) (aref __x74 0))
(:nil () (new-tuple ))
(:cons (__x75 __x76) (new-tuple __x75 __x76))
(:head (__x77) (aref __x77 0))
(:tail (__x78) (aref __x78 1))
(:empty (__x79) (let ((__x80 (alen __x79))) (= 0 __x80)))
(:size (__x81) (let ((__x82 (:empty __x81))) (if __x82 0 (let ((__x83 (:tail __x81))) (let ((__x84 (:size __x83))) (+ 1 __x84))))))
(:contains (__x85 __x86) (let ((__x87 (:empty __x86))) (if __x87 0 (let ((__x88 (:head __x86))) (let ((__x89 (= __x85 __x88))) (if __x89 1 (let ((__x90 (:tail __x86))) (:contains __x85 __x90))))))))
(:not (__x91) (if __x91 0 1))
(:and (__x92 __x93) (if __x92 (if __x93 1 0) 0))
(:or (__x94 __x95) (if __x94 1 (if __x95 1 0)))
(:eq (__x96 __x97) (let ((__x98 (a? __x96))) (let ((__x99 (a? __x97))) (let ((__x100 (:and __x98 __x99))) (if __x100 (:eq_list __x96 __x97) (let ((__x101 (number? __x96))) (let ((__x102 (number? __x97))) (let ((__x103 (:and __x101 __x102))) (if __x103 (= __x96 __x97) 0)))))))))
(:eq_num (__x104 __x105) (= __x104 __x105))
(:eq_list (__x106 __x107) (let ((__x108 (:empty __x106))) (let ((__x109 (:empty __x107))) (let ((__x110 (:and __x108 __x109))) (if __x110 1 (let ((__x111 (:empty __x106))) (let ((__x112 (:empty __x107))) (let ((__x113 (:or __x111 __x112))) (if __x113 0 (let ((__x114 (:head __x106))) (let ((__x115 (:head __x107))) (let ((__x116 (:eq __x114 __x115))) (let ((__x117 (:tail __x106))) (let ((__x118 (:tail __x107))) (let ((__x119 (:eq_list __x117 __x118))) (:and __x116 __x119))))))))))))))))
(:eq_arr (__x120 __x121) (let ((__x122 (alen __x120))) (let ((__x123 (alen __x121))) (let ((__x124 (= __x122 __x123))) (if __x124 (:eq_arr_helper __x120 __x121 0) 0)))))
(:eq_arr_helper (__x125 __x126 __x127) (let ((__x128 (alen __x125))) (let ((__x129 (= __x128 __x127))) (let ((__x130 (alen __x126))) (let ((__x131 (= __x130 __x127))) (let ((__x132 (:and __x129 __x131))) (if __x132 1 (let ((__x133 (aref __x125 __x127))) (let ((__x134 (aref __x126 __x127))) (let ((__x135 (:eq __x133 __x134))) (let ((__x136 (+ 1 __x127))) (let ((__x137 (:eq_arr_helper __x125 __x126 __x136))) (:and __x135 __x137)))))))))))))
(:test (__x138 __x139) (let ((__x140 (:eq __x138 __x139))) (if __x140 (:print 1) (let ((__x141 (:print __x138))) (:print __x139)))))
(:print (__x142) (print __x142))
(:identity (__x143) __x143))