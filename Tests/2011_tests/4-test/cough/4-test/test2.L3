((:test 5 5)
(:tolist (__x0) (:tolisthelper __x0 0))
(:tolisthelper (__x1 __x2) (let ((__x3 (alen __x1))) (let ((__x4 (<= __x3 __x2))) (if __x4 (:nil) (let ((__x5 (aref __x1 __x2))) (let ((__x6 (+ 1 __x2))) (let ((__x7 (:tolisthelper __x1 __x6))) (:cons __x5 __x7))))))))
(:foreach (__x8 __x9) (let ((__x10 (:empty __x8))) (if __x10 1 (let ((__x12 (:head __x8))) (let ((__x11 (__x9 __x12))) (let ((__x13 (:tail __x8))) (:foreach __x13 __x9)))))))
(:map (__x14 __x15) (let ((__x16 (:empty __x14))) (if __x16 (:nil) (let ((__x17 (:head __x14))) (let ((__x18 (__x15 __x17))) (let ((__x19 (:tail __x14))) (let ((__x20 (:map __x19 __x15))) (:cons __x18 __x20))))))))
(:filter (__x21 __x22) (let ((__x23 (:empty __x21))) (if __x23 (new-tuple ) (let ((__x24 (:head __x21))) (let ((__x25 (__x22 __x24))) (if __x25 (let ((__x26 (:head __x21))) (let ((__x27 (:tail __x21))) (let ((__x28 (:filter __x27 __x22))) (:cons __x26 __x28)))) (let ((__x29 (:tail __x21))) (:filter __x29 __x22))))))))
(:foldl (__x30 __x31 __x32) (let ((__x33 (:empty __x32))) (if __x33 __x31 (let ((__x34 (:head __x32))) (let ((__x35 (__x30 __x31 __x34))) (let ((__x36 (:tail __x32))) (:foldl __x30 __x35 __x36)))))))
(:zip (__x37 __x38) (let ((__x39 (:empty __x37))) (if __x39 (:nil) (let ((__x40 (:empty __x38))) (if __x40 (:nil) (let ((__x41 (:head __x37))) (let ((__x42 (:head __x38))) (let ((__x43 (:nil))) (let ((__x44 (:cons __x42 __x43))) (let ((__x45 (:cons __x41 __x44))) (let ((__x46 (:tail __x37))) (let ((__x47 (:tail __x38))) (let ((__x48 (:zip __x46 __x47))) (:cons __x45 __x48))))))))))))))
(:find (__x49 __x50) (let ((__x51 (:empty __x49))) (if __x51 (:none) (let ((__x52 (:head __x49))) (let ((__x53 (__x50 __x52))) (if __x53 (let ((__x54 (:head __x49))) (:some __x54)) (let ((__x55 (:tail __x49))) (:find __x55 __x50))))))))
(:sq (__x56) (* __x56 __x56))
(:double (__x57) (+ __x57 __x57))
(:sqdouble (__x58) (let ((__x59 (:double __x58))) (let ((__x60 (:double __x58))) (* __x59 __x60))))
(:greaterthan3 (__x61) (< 3 __x61))
(:add (__x62 __x63) (+ __x62 __x63))
(:mult (__x64 __x65) (* __x64 __x65))
(:some (__x66) (let ((__x67 (new-tuple __x66))) (:tolist __x67)))
(:none () (new-tuple ))
(:option_get (__x68) (aref __x68 0))
(:nil () (new-tuple ))
(:cons (__x69 __x70) (new-tuple __x69 __x70))
(:head (__x71) (aref __x71 0))
(:tail (__x72) (aref __x72 1))
(:empty (__x73) (let ((__x74 (alen __x73))) (= 0 __x74)))
(:size (__x75) (let ((__x76 (:empty __x75))) (if __x76 0 (let ((__x77 (:tail __x75))) (let ((__x78 (:size __x77))) (+ 1 __x78))))))
(:contains (__x79 __x80) (let ((__x81 (:empty __x80))) (if __x81 0 (let ((__x82 (:head __x80))) (let ((__x83 (= __x79 __x82))) (if __x83 1 (let ((__x84 (:tail __x80))) (:contains __x79 __x84))))))))
(:not (__x85) (if __x85 0 1))
(:and (__x86 __x87) (if __x86 (if __x87 1 0) 0))
(:or (__x88 __x89) (if __x88 1 (if __x89 1 0)))
(:eq (__x90 __x91) (let ((__x92 (a? __x90))) (let ((__x93 (a? __x91))) (let ((__x94 (:and __x92 __x93))) (if __x94 (:eq_list __x90 __x91) (let ((__x95 (number? __x90))) (let ((__x96 (number? __x91))) (let ((__x97 (:and __x95 __x96))) (if __x97 (= __x90 __x91) 0)))))))))
(:eq_num (__x98 __x99) (= __x98 __x99))
(:eq_list (__x100 __x101) (let ((__x102 (:empty __x100))) (let ((__x103 (:empty __x101))) (let ((__x104 (:and __x102 __x103))) (if __x104 1 (let ((__x105 (:empty __x100))) (let ((__x106 (:empty __x101))) (let ((__x107 (:or __x105 __x106))) (if __x107 0 (let ((__x108 (:head __x100))) (let ((__x109 (:head __x101))) (let ((__x110 (:eq __x108 __x109))) (let ((__x111 (:tail __x100))) (let ((__x112 (:tail __x101))) (let ((__x113 (:eq_list __x111 __x112))) (:and __x110 __x113))))))))))))))))
(:eq_arr (__x114 __x115) (let ((__x116 (alen __x114))) (let ((__x117 (alen __x115))) (let ((__x118 (= __x116 __x117))) (if __x118 (:eq_arr_helper __x114 __x115 0) 0)))))
(:eq_arr_helper (__x119 __x120 __x121) (let ((__x122 (alen __x119))) (let ((__x123 (= __x122 __x121))) (let ((__x124 (alen __x120))) (let ((__x125 (= __x124 __x121))) (let ((__x126 (:and __x123 __x125))) (if __x126 1 (let ((__x127 (aref __x119 __x121))) (let ((__x128 (aref __x120 __x121))) (let ((__x129 (:eq __x127 __x128))) (let ((__x130 (+ 1 __x121))) (let ((__x131 (:eq_arr_helper __x119 __x120 __x130))) (:and __x129 __x131)))))))))))))
(:test (__x132 __x133) (let ((__x134 (:eq __x132 __x133))) (if __x134 (:print 1) (let ((__x135 (:print __x132))) (:print __x133)))))
(:print (__x136) (print __x136))
(:identity (__x137) __x137))